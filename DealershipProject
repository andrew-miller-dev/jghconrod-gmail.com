using System;
using System.Collections.Generic;

namespace DealershipProject
{
    class ComissionEarned
    {
        public Employee employee;
        public double comission;
        public ComissionEarned(Employee Employee, double Comission)
        {
            employee = Employee; comission = Comission;
        }
    }
    class VehicleService
    {
        public Vehicle vehicle;
        public Client client;
        public VehicleService(Vehicle Vehicle, Client Client)
        {
            vehicle = Vehicle; client = Client;
        }
    }

    class Vehicle
    {
        public string make;
        public string model;
        public int year;
        public bool rentedStatus = false;
        public bool serviceStatus = false;
        public Vehicle(string Make, string Model, int Year)
        {
            make = Make; model = Model; year = Year;
        }
        public string IsAvailable()
        {
            string rented;
            string service;

            if (rentedStatus == true)
                rented = "This car is unavailable for rent";
            else
                rented = "This car is available for rent";

            if (serviceStatus == true)
                service = "this car is in service";
            else
                service = "this car is not in service";

            return $"{rented}, {service}.";
        }
        public void VehicleInfo(string make, string model, int year)
        {
            Console.WriteLine("  ***************************");
            Console.WriteLine("  * Displaying vehicle info *");
            Console.WriteLine("  ***************************");
            Console.WriteLine($"\nCar: {make} {model} {year}");
            Console.WriteLine($"Status: {IsAvailable()}");
        }
    }
    class Employee
    {
        public string fname;
        public string lname;
        public string sin = "n/a";
        public string email = "n/a";
        public double comissionEarned = 0;
        public Employee(string Fname, string Lname)
        {
            fname = Fname; lname = Lname;
        }
        public Employee(string Fname, string Lname, string Sin, string Email)
        {
            fname = Fname; lname = Lname; sin = Sin; email = Email;
        }

        public void ServiceCar(Vehicle v, Services s)
        {
            s.Repair(v.make, v.model, v.year);
        }
        public void ReturnCar(Vehicle v, Services s)
        {
            s.Complete(v.make, v.model, v.year);
        }

        public void EmployeeInfo(string Lname)
        {
            if (Lname == lname)
            {
                Console.WriteLine("  ****************************");
                Console.WriteLine("  * Displaying employee info *");
                Console.WriteLine("  ****************************");
                Console.WriteLine($"Name: {fname} {lname}");
                Console.WriteLine($"Sin: {sin}");
                Console.WriteLine($"E-mail: {email}");
            }
        }
    }

    // Create the Client Class
    class Client
    {
        public string fname;
        public string lname;
        public string telephone;
        public string email;
        public List<Vehicle> vehiclesBought;
        public List<Vehicle> vehiclesRented;

        // Client constructor
        public Client(string Fname, string Lname, string phoneNumber, string Email)
        {
            fname = Fname;
            lname = Lname;
            telephone = phoneNumber;
            email = Email;
            vehiclesBought = new List<Vehicle>();
            vehiclesRented = new List<Vehicle>();
        }
        // Client purchase a car
        public void Buy(Vehicle car)
        {
            vehiclesBought.Add(car); // Add the car to the Client's bought list
        }
        // Client rent a car
        public void Rent(Vehicle car)
        {
            vehiclesRented.Add(car); // Add the car to the Client's rented list
        }
        // Client return a rented car
        public void ReturnRented(Vehicle car)
        {
            for (var i = 0; i < vehiclesRented.Count; i++)
            {
                if (vehiclesRented[i].make == car.make && vehiclesRented[i].model == car.model && vehiclesRented[i].year == car.year)
                {
                    vehiclesRented.RemoveAt(i);
                }
            }
        }
        // Method to display a client's info
        public void ClientInfo(string Lname)
        {
            if (Lname == lname)
            {
                Console.WriteLine("  ***************************");
                Console.WriteLine("  *  Displaying client info *");
                Console.WriteLine("  ***************************");
                Console.WriteLine("\nName: " + fname + " " + lname);
                Console.WriteLine("Telephone: " + telephone);
                Console.WriteLine("E-mail: " + email);
            }
        }
    }
    class VehiclePurchase
    {
        public string lastName;
        public Vehicle vehicle;
        public int cost;
        public Employee employee;
        public VehiclePurchase(String lName, Vehicle Vehicle, int Cost, Employee Employee)
        {
            lastName = lName;
            vehicle = Vehicle;
            cost = Cost;
            employee = Employee;
        }
    }

    class Inventory
    {
        // Each list item is an instance of an object of their respective classes
        protected static List<Vehicle> vehicles = new List<Vehicle>();
        protected static List<Client> clients = new List<Client>();
        protected static List<Employee> employees = new List<Employee>();

        public void AddEmployee(string fname, string lname)
        {
            var employee = new Employee(fname, lname);
            bool duplicate = false;

            foreach (Employee e in employees)
            {
                if (e.fname == fname & e.lname == lname)
                {
                    duplicate = true;
                }
            }

            if (duplicate == false)
            {
                employees.Add(employee);
                Console.WriteLine($"{fname} {lname} has been added successfully!");
            }
            else
                Console.WriteLine("This is a duplicate employee and cannot be added..");
        }
        public void AddEmployee(string fname, string lname, string sin, string email)
        {
            var employee = new Employee(fname, lname, sin, email);
            bool duplicate = false;

            foreach (Employee e in employees)
            {
                if (e.fname == fname & e.lname == lname)
                {
                    duplicate = true;
                }
            }

            if (duplicate == false)
            {
                employees.Add(employee);
                Console.WriteLine($"{fname} {lname} {sin} {email} has been added successfully!");
            }
            else
                Console.WriteLine("This is a duplicate employee and cannot be added..");
        }

        public void RemoveEmployee(string fname, string lname)
        {
            for (int i = 0; i < employees.Count; i++)
            {
                if (employees[i].fname == fname & employees[i].lname == lname)
                {
                    employees.RemoveAt(i);
                    Console.WriteLine($"{fname} {lname} has been removed successfully!");
                }
            }
        }

        public void AddClient(string fname, string lname, string phone, string email)
        {
            var client = new Client(fname, lname, phone, email);
            bool duplicate = false;

            foreach (Client c in clients)
            {
                if (c.fname == fname & c.lname == lname)
                {
                    duplicate = true;
                }
            }

            if (duplicate == false)
            {
                clients.Add(client);
                Console.WriteLine($"{fname} {lname} has been added successfully!");
            }
            else
                Console.WriteLine("This is a duplicate client and cannot be added..");
        }

        public void RemoveClient(string fname, string lname)
        {
            for (int i = 0; i < clients.Count; i++)
            {
                if (clients[i].fname == fname & clients[i].lname == lname)
                {
                    clients.RemoveAt(i);
                    Console.WriteLine($"{fname} {lname} has been removed successfully!");
                }
            }
        }

        public void AddVehicle(string make, string model, int year)
        {
            var vehicle = new Vehicle(make, model, year);
            bool duplicate = false;

            foreach (Vehicle c in vehicles)
            {
                if (c.make == make & c.model == model & c.year == year)
                {
                    duplicate = true;
                }
            }

            if (duplicate == false)
            {
                vehicles.Add(vehicle);
                Console.WriteLine($"{year} {make} {model} has been added successfully to the inventory");
            }
            else
                Console.WriteLine("This is a duplicate car and cannot be added..");
        }

        public void RemoveVehicle(string make, string model, int year)
        {
            for (int i = 0; i < vehicles.Count; i++)
            {
                if (vehicles[i].make == make & vehicles[i].model == model & vehicles[i].year == year)
                {
                    vehicles.RemoveAt(i);
                    Console.WriteLine($"{year} {make} {model} has been removed successfully from the inventory!");
                }
            }
        }
    }

    class Dealership : Inventory
    {
        protected static List<VehiclePurchase> vehiclesPurchased = new List<VehiclePurchase>();
        protected static List<ComissionEarned> comissionsEarned = new List<ComissionEarned>();
        public void SellCar(string clname, string make, string model, int year, int cost, string efname, string elname)
        {
            var vehicle = new Vehicle(make, model, year);
            var employee = new Employee(efname, elname);

            bool carPresent = false;
            bool clientPresent = false;

            foreach (Client c in clients)
            {
                if (c.lname == clname)
                {
                    clientPresent = true;
                }
            }
            foreach (Vehicle v in vehicles)
            {
                if (v.make == make & v.model == model & v.year == year)
                {
                    carPresent = true;
                }
            }

            if (clientPresent == true & carPresent == true)
            {
                var vehiclePurchase = new VehiclePurchase(clname, vehicle, cost, employee);
                vehiclesPurchased.Add(vehiclePurchase);

                foreach (Client c in clients)
                {
                    if (c.lname == clname)
                    {
                        c.Buy(vehicle);
                    }
                }

                double comission = CalcComission(cost);
                var comissionEarned = new ComissionEarned(employee, comission);
                comissionsEarned.Add(comissionEarned);

                employee.comissionEarned = comission;

                Console.WriteLine($"Client {clname} has purchased a {year} {make} {model} for ${cost}.");
                Console.WriteLine($"{efname} {elname} has made earned ${comission} in comission.");

                RemoveVehicle(make, model, year);
            }
            else
                Console.WriteLine("Invalid information, this cannot be sold. Please check all your information and try again..");
        }

        public double CalcComission(double sale)
        {
            double comission = sale * 0.05;
            return comission;
        }

        public void ShowPurchased()
        {
            int totalMade = 0;

            Console.WriteLine("Vehicles purchased at this dealership:");
            foreach (VehiclePurchase vp in vehiclesPurchased)
            {
                Console.WriteLine($"Client: {vp.lastName}, Vehicle: {vp.vehicle.year} {vp.vehicle.make} {vp.vehicle.model}, " +
                                  $"Cost: ${vp.cost}, Sold by: {vp.employee.fname} {vp.employee.lname}");
                totalMade += vp.cost;
            }
            Console.WriteLine($"Total ammount made through sales: ${totalMade}");
        }

        public void ShowComission()
        {
            Console.WriteLine($"Total comission made by employees:");
            foreach (ComissionEarned ce in comissionsEarned)
            {
                Console.WriteLine($"Name: {ce.employee.fname} {ce.employee.lname}, Comission Earned: ${ce.comission}");
            }
        }
        public void ShowEmployee(string Lname)
        {
            foreach (Employee e in employees)
            {
                e.EmployeeInfo(Lname);
            }
        }
        public void ShowEmployee()
        {
            Console.WriteLine("Employees: ");
            foreach (Employee e in employees)
            {
                if (e.email == "n/a" || e.sin == "n/a")
                    Console.WriteLine($"{e.fname} {e.lname}");
                else
                    Console.WriteLine($"{e.fname} {e.lname} {e.sin} {e.email}");
            }
        }

        public void ShowClient(string Lname)
        {
            foreach (Client c in clients)
            {
                c.ClientInfo(Lname);
            }
        }
        public void ShowClient()
        {
            Console.WriteLine("Clients: ");
            foreach (Client c in clients)
            {
                Console.WriteLine($"{c.fname} {c.lname} {c.email} {c.telephone}");
            }
        }
        public void ShowVehicle(string make, string model, int year)
        {
            foreach (Vehicle v in vehicles)
            {
                if (make == v.make & model == v.model && year == v.year)
                {
                    v.VehicleInfo(make, model, year);
                }
            }
        }

        public void ShowVehicle()
        {
            Console.WriteLine("Vehicles: ");
            foreach (Vehicle v in vehicles)
            {
                Console.WriteLine($"{v.year} {v.make} {v.model}");
            }
        }

        public void ShowDealership()
        {
            Console.WriteLine("Dealership Information");
            ShowVehicle();
            Console.WriteLine();
            ShowEmployee();
            Console.WriteLine();
            ShowClient();
            Console.WriteLine();
            ShowPurchased();
            Console.WriteLine();
            ShowComission();
        }
    }
    // Create the services class
    class Services : Inventory
    {
        protected static List<Vehicle> vehiclesInService = new List<Vehicle>();
        protected static List<Vehicle> vehiclesRented = new List<Vehicle>();
        // Add a vehicle to the Repair waitlist
        public void Repair(string make, string model, int year)
        {
            var vehicle = new Vehicle(make, model, year);
            vehiclesInService.Add(vehicle);
            Console.WriteLine($"Vehicle {vehicle.make} {vehicle.model} {vehicle.year} has been added to the vehicles in service.");
        }
        // Complete the repair job on a vehicle, marking the service as completed
        public void Complete(string make, string model, int year) 
        {
            for (var i = 0; i < vehiclesInService.Count; i++)
            {
                if (vehiclesInService[i].make == make && vehiclesInService[i].model == model && vehiclesInService[i].year == year)
                {
                    vehiclesInService.RemoveAt(i);
                    Console.WriteLine($"{year} {make} {model} repair has been completed.");
                }
            }
        }
        // Rent a vehicle method
        public void RentVehicle(string lname)
        {
            foreach (Client c in clients)
            {
                if (c.lname == lname)
                {
                    foreach (Vehicle v in vehicles)
                    {
                        var vehicle = new Vehicle(v.make, v.model, v.year);
                        RemoveVehicle(v.make, v.model, v.year);
                        Console.WriteLine($"\n{vehicle.year} {vehicle.make} {vehicle.model} has been rented to {c.fname} {c.lname}.\n");
                        vehiclesRented.Add(vehicle);
                        c.Rent(vehicle);

                        break;
                    }
                }
            }
        }
        // Return a vehicle method
        public void ReturnVehicle(string lname)
        {
            foreach (Client c in clients)
            {
                if (c.lname == lname)
                {
                    foreach (Vehicle v in vehiclesRented)
                    {
                        for (int i = 0; i < vehiclesRented.Count; i++)
                        {
                            if (v == c.vehiclesRented[i])
                            {
                                var vehicle = new Vehicle(v.make, v.model, v.year);
                                AddVehicle(v.make, v.model, v.year);
                                Console.WriteLine($"\n{c.fname} {c.lname} has returned the {vehicle.year} {vehicle.make} {vehicle.model}.\n");
                                vehiclesRented.Remove(vehicle);
                                c.ReturnRented(vehiclesRented[i]);

                                break;
                            }
                        }
                    }
                }
            }
        }
        // Method to display vehicles in service
        public void DisplayAll()
        {
            Console.WriteLine("\nCurrent list of Vehicles in service:");
            foreach (Vehicle v in vehiclesInService)
            {
                Console.WriteLine($"{v.make} {v.model} {v.year}.");
            }
        }
    }

    class Program
    {
        static void Main()
        {
            var inv = new Inventory();
            var dealer = new Dealership();
            var serv = new Services();
            string input;

            // This is some basic data so you don't have to add everytime
            // Format: Firstname, Lastname 
            Console.WriteLine("Employee Additions:");
            inv.AddEmployee("Mark", "Wong", "084 999 671", "m.wong@dealership.ca");
            inv.AddEmployee("Jeff", "Halbert", "003 212 867", "j.halbert@dealership.ca");
            inv.AddEmployee("John", "Jones", "171 762 206", "j.jones@dealership.ca");
            inv.AddEmployee("Mona", "Limbar", "645 405 655", "m.limbar@dealership.ca");
            inv.AddEmployee("Rabia", "Forn", "319 384 731", "r.forn@dealership.ca");
            inv.AddEmployee("Ryan", "Graves", "664 335 585", "r.graves@dealership.ca");
            inv.AddEmployee("Mona", "Limbar", "550 407 142", "m.limbar@dealership.ca");      // Comes up invalid as a duplicate *onpurpose*
            inv.RemoveEmployee("John", "Jones");
            Console.WriteLine();

            // Format: Firstname, Lastname 
            Console.WriteLine("Client Additions:");
            inv.AddClient("Nora", "Lee", "4038165555", "nora@gmail.com");
            inv.AddClient("Joshua", "Charlie", "4038168989", "joshua@gmail.com");
            inv.AddClient("Kathleen", "Darlin", "4037742536", "k.darlin@gmail.com");
            inv.AddClient("Farhana", "Wood", "4063251245", "woodfarhana@hotmail.com");
            inv.AddClient("Lisa", "Britton", "4038569658", "lisabritton@outlook.com");
            inv.AddClient("Huxley", "Graham", "4036669998", "g.huxley323@mybvc.ca");
            inv.AddClient("Josiah", "Cairns", "4036658989", "josiah@hotmail.com");
            inv.AddClient("Rayan", "Galloway", "4038894478", "galloway@yahoo.com");
            inv.AddClient("Kathleen", "Darlin", "4037742536", "k.darlin@gmail.com");    // Comes up invalid as a duplicate *onpurpose*
            inv.AddClient("Sasha", "Garst", "4038586545", "ggggarst@mymail.com");
            inv.RemoveClient("Sasha", "Garst");
            Console.WriteLine();

            // Format: Make, Model, Year
            Console.WriteLine("Car Additions:");
            inv.AddVehicle("Ford", "Taurus", 2012);
            inv.AddVehicle("Ford", "Taurus", 2012);     // Comes up invalid as a duplicate *onpurpose*
            inv.AddVehicle("Toyota", "Prius", 2015);
            inv.AddVehicle("Buick", "Regal", 2009);
            inv.AddVehicle("Honda", "Civic", 2009);
            inv.AddVehicle("Nissan", "Sentra", 2007);
            inv.AddVehicle("Toyota", "Camry", 2014);
            inv.AddVehicle("Acura", "RDX", 2009);
            inv.AddVehicle("Hyundai", "Sonata", 2019);
            inv.AddVehicle("Jeep", "Wrangler", 2018);
            inv.AddVehicle("Honda", "Civic", 2005);
            inv.AddVehicle("Mercedes", "Benz", 2016);
            inv.AddVehicle("Saturn", "Ion", 2006);
            inv.AddVehicle("Ford", "F-350", 2005);
            inv.AddVehicle("Subaru", "Forester", 2011);
            inv.AddVehicle("Honda", "Fit", 2010);
            inv.AddVehicle("Fiat", "Uno", 2013);
            inv.AddVehicle("Hyundai", "Tucson", 2020);
            inv.RemoveVehicle("Mercedes", "Benz", 2016);
            inv.AddVehicle("Cadillac", "Deville", 1999);

            // Format: Client Lastname, Make, Model, Year, Cost, Employee Firsname, Employee lastname
            dealer.SellCar("Lee", "Buick", "Regal", 2009, 3400, "Mona", "Limbar");
            dealer.SellCar("Charlie", "Cadillac", "Deville", 1999, 900, "Mark", "Wong");
            dealer.SellCar("Britton", "Toyota", "Prius", 2015, 7000, "Rabia", "Forn");
            dealer.SellCar("Graham", "Acura", "RDX", 2009, 2200, "Mona", "Limbar");   // Need to handle duplicates for comission sales
            dealer.SellCar("Galloway", "Jeep", "Wrangler", 2018, 12000, "Ryan", "Graves");
            dealer.SellCar("Charlie", "Honda", "Civic", 2005, 1900, "Jeff", "Halbert");
            dealer.SellCar("Wood", "Nissan", "Sentra", 2007, 1600, "Mark", "Wong");
            dealer.SellCar("Galloway", "Honda", "Civic", 2009, 2500, "Rabia", "Forn");
            dealer.SellCar("Cairns", "Hyundai", "Sonata", 2019, 14500, "John", "Jones");
            Console.WriteLine();
            dealer.SellCar("Darlin", "Buick", "Regal", 2009, 3400, "Mark", "Wong"); // Comes up invalid because information does not exist *onpurpose*

            // Services 
            serv.Repair("Hyundai", "Sonata", 2019);
            //serv.RentVehicle("Britton");
            serv.Repair("Honda", "Civic", 2005);
            //serv.RentVehicle("Graham");

            do
            {
                Console.Clear();    // Clears the screen so you don't have to see it every run time, can be commented out to see what's happening above.
                Console.WriteLine("              **********************************");
                Console.WriteLine("              *                                *");
                Console.WriteLine("              *  Dealership Management System  *");
                Console.WriteLine("              *                                *");
                Console.WriteLine("              **********************************");
                Console.WriteLine("\nPlease enter your desired command, if you do not know the commands please type 'help'.");
                Console.WriteLine();

                Console.Write("Command: ");
                input = Console.ReadLine();
                Console.WriteLine();

                if (input == "help")
                {
                    Console.WriteLine("Show Commands:");
                    Console.WriteLine("'show all' displays all dealership information");
                    Console.WriteLine("'show vehicles' to see vehicles");
                    Console.WriteLine("'show clients' to see clients");
                    Console.WriteLine("'show employees' to see employees");
                    Console.WriteLine("'show purchased' displays all vehicles sold all the dealership");
                    Console.WriteLine("'show comissions' displays each employee and comissions they've earned");
                    Console.WriteLine("\nAdd Commands:");
                    Console.WriteLine("'add client' to add a client");
                    Console.WriteLine("'add employee' to add an employee");
                    Console.WriteLine("'add vehicle' to add a vehicle");
                    Console.WriteLine("\nDelete Commands:");
                    Console.WriteLine("'delete client' to delete a client");
                    Console.WriteLine("'delete employee' to delete an employee");
                    Console.WriteLine("'delete vehicle' to delete a vehicle");
                    Console.WriteLine("\nSale Command:");
                    Console.WriteLine("'sell vehicle' to sell a vehicle to a customer");
                    Console.WriteLine("\nServices Commands:");
                    Console.WriteLine("'service start' to begin the servicing of a vehicle");
                    Console.WriteLine("'service complete' to complete the servicing of a vehicle");
                    Console.WriteLine("'show services' to display the current list of services awating service");
                    Console.WriteLine("\nType exit and then enter to leave at any time...");
                }
                if (input == "show all")
                {
                    dealer.ShowDealership();
                }
                if (input == "show vehicles")
                {
                    Console.WriteLine("'show all' to see a list of vehicles at this dealership");
                    Console.WriteLine("'show vehicle to see all available information on a specific vehicle\n");

                    input = Console.ReadLine();

                    if (input == "show all")
                    {
                        dealer.ShowVehicle();
                    }
                    if (input == "show vehicle")
                    {
                        Console.WriteLine("Please enter the vehicles make");
                        string make = Console.ReadLine();
                        Console.WriteLine("Please enter the the vehicles model");
                        string model = Console.ReadLine();
                        Console.WriteLine("Please enter the the vehicles year");
                        string yearSTR = Console.ReadLine();
                        int year = Convert.ToInt32(yearSTR);
                        Console.WriteLine();

                        dealer.ShowVehicle(make, model, year);
                    }
                }
                if (input == "show clients")
                {
                    Console.WriteLine("'show all' to see a list of clients at this dealership");
                    Console.WriteLine("'show client' to look up a specific client\n");

                    input = Console.ReadLine();

                    if (input == "show all")
                    {
                        dealer.ShowClient();
                    }
                    if (input == "show client")
                    {
                        Console.WriteLine("Please enter the clients last name");
                        string lname = Console.ReadLine();
                        Console.WriteLine();

                        dealer.ShowClient(lname);
                    }
                }
                if (input == "show employees")
                {
                    Console.WriteLine("'show all' to see a list of employees at this dealership");
                    Console.WriteLine("'show employee' to look up a specific employee\n");

                    input = Console.ReadLine();

                    if (input == "show all")
                    {
                        dealer.ShowEmployee();
                    }
                    if (input == "show employee")
                    {
                        Console.WriteLine("Please enter the employees last name");
                        string lname = Console.ReadLine();
                        Console.WriteLine();

                        dealer.ShowEmployee(lname);
                    }
                }
                if (input == "show comissions")
                {
                    dealer.ShowComission();
                }
                if (input == "show purchased")
                {
                    dealer.ShowPurchased();
                }
                if (input == "add client")
                {
                    Console.WriteLine("Please enter your clients first name:");
                    string fname = Console.ReadLine();
                    Console.WriteLine("Please enter your clients last name:");
                    string lname = Console.ReadLine();
                    Console.WriteLine("Please enter your clients telephone number:");
                    string phone = Console.ReadLine();
                    Console.WriteLine("Please enter your clients E-mail:");
                    string email = Console.ReadLine();

                    dealer.AddClient(fname, lname, phone, email);
                }
                if (input == "delete client")
                {
                    Console.WriteLine("Please enter your clients first name:");
                    string fname = Console.ReadLine();
                    Console.WriteLine("Please enter your clients last name:");
                    string lname = Console.ReadLine();

                    dealer.RemoveClient(fname, lname);
                }
                if (input == "add employee")
                {
                    Console.WriteLine("Please enter your employees first name:");
                    string fname = Console.ReadLine();
                    Console.WriteLine("Please enter your employees last name:");
                    string lname = Console.ReadLine();

                    Console.WriteLine("Would you like to add a SIN and Email? yes/no");
                    input = Console.ReadLine();
                    if (input == "no")
                    {
                        dealer.AddEmployee(fname, lname);
                    }
                    if (input == "yes")
                    {
                        Console.WriteLine("Enter the employees SIN:");
                        string sin = Console.ReadLine();

                        Console.WriteLine("Enter the employees E-Mail:");
                        string email = Console.ReadLine();

                        dealer.AddEmployee(fname, lname, sin, email);
                    }


                }
                if (input == "delete employee")
                {
                    Console.WriteLine("Please enter your clients first name:");
                    string fname = Console.ReadLine();
                    Console.WriteLine("Please enter your clients last name:");
                    string lname = Console.ReadLine();

                    dealer.RemoveEmployee(fname, lname);
                }
                if (input == "add vehicle")
                {
                    Console.WriteLine("Please enter the vehicles make:");
                    string make = Console.ReadLine();
                    Console.WriteLine("Please enter the vehicles model:");
                    string model = Console.ReadLine();
                    Console.WriteLine("Please enter the vehicles year:");
                    string yearSTR = Console.ReadLine();
                    int year = Convert.ToInt32(yearSTR);

                    dealer.AddVehicle(make, model, year);
                }
                if (input == "delete vehicle")
                {
                    Console.WriteLine("Please enter the vehicles make:");
                    string make = Console.ReadLine();
                    Console.WriteLine("Please enter the vehicles model:");
                    string model = Console.ReadLine();
                    Console.WriteLine("Please enter the vehicles year:");
                    string yearSTR = Console.ReadLine();
                    int year = Convert.ToInt32(yearSTR);

                    dealer.RemoveVehicle(make, model, year);
                }
                if (input == "sell vehicle")
                {
                    Console.WriteLine("In order to sell a vehicle we must gather some information..");
                    Console.WriteLine("We need the information of the employee who sold the vehicle:");
                    Console.WriteLine("Enter the employees first name:");
                    string efname = Console.ReadLine();
                    Console.WriteLine("Enter the employees last name:");
                    string elname = Console.ReadLine();

                    Console.WriteLine("We also need the client's information:");
                    Console.WriteLine("Enter the client last name:");
                    string clname = Console.ReadLine();

                    Console.WriteLine("We need the vehicles information:");
                    Console.WriteLine("Enter the vehicles make:");
                    string make = Console.ReadLine();
                    Console.WriteLine("Enter the vehicles model:");
                    string model = Console.ReadLine();
                    Console.WriteLine("Enter the vehicles year:");
                    string yearSTR = Console.ReadLine();
                    int year = Convert.ToInt32(yearSTR);

                    Console.WriteLine("Enter the cost of the vehicle:");
                    string costSTR = Console.ReadLine();
                    int cost = Convert.ToInt32(costSTR);

                    dealer.SellCar(clname, make, model, year, cost, efname, elname);
                }
                if (input == "service start")
                {
                    Console.WriteLine("Enter the vehicle make:");
                    string make = Console.ReadLine();
                    Console.WriteLine("Enter the vehicle model:");
                    string model = Console.ReadLine();
                    Console.WriteLine("Enter the vehicle year:");
                    string yearSTR = Console.ReadLine();
                    int year = Convert.ToInt32(yearSTR);

                    Console.WriteLine("Enter the clients last name:");
                    string lname = Console.ReadLine();

                    Console.WriteLine("Do you need a car rental? yes or no");
                    input = Console.ReadLine();

                    if (input == "yes")
                    {
                        serv.RentVehicle(lname);
                        serv.Repair(make, model, year);
                    }
                    else if (input == "no")
                    {
                        serv.Repair(make, model, year);
                    }
                }
                if (input == "service complete")
                {
                    Console.WriteLine("Enter the Vehicle make:");
                    string make = Console.ReadLine();
                    Console.WriteLine("Enter the model:");
                    string model = Console.ReadLine();
                    Console.WriteLine("Enter the year:");
                    string yearSTR = Console.ReadLine();
                    int year = Convert.ToInt32(yearSTR);

                    Console.WriteLine("Enter the clients last name");
                    string lname = Console.ReadLine();

                    serv.ReturnVehicle(lname);
                    serv.Complete(make, model, year);

                }
                if (input == "show services")
                {
                    serv.DisplayAll();
                }
                Console.WriteLine("\n*Press enter before you type next..*");
                Console.ReadKey();
            } while (input != "exit");
        }
    }
}
